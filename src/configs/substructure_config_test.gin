import graph_world.models.basic_gnn

GeneratorBeamHandlerWrapper.handler = @SubstructureBeamHandler()
GeneratorBeamHandlerWrapper.nsamples = 1
SubstructureBeamHandler.substruct = %Substructure.TAILED_TRIANGLE_GRAPH

SubstructureBeamHandler.num_tuning_rounds = 2
SubstructureBeamHandler.tuning_metric = "test_mse_scaled"
SubstructureBeamHandler.tuning_metric_is_loss = True
SubstructureBeamHandler.param_sampler_specs = [
  @num_graphs/ParamSamplerSpec(),
  @num_vertices/ParamSamplerSpec(),
  @edge_prob/ParamSamplerSpec(),
  @train_prob/ParamSamplerSpec(),
  @tuning_prob/ParamSamplerSpec()
]

num_graphs/ParamSamplerSpec.name = "num_graphs"
num_graphs/ParamSamplerSpec.min_val = 100
num_graphs/ParamSamplerSpec.max_val = 100

num_vertices/ParamSamplerSpec.name = "num_vertices"
num_vertices/ParamSamplerSpec.min_val = 10
num_vertices/ParamSamplerSpec.max_val = 10

edge_prob/ParamSamplerSpec.name = "edge_prob"
edge_prob/ParamSamplerSpec.min_val = 0.6 # Check paper
edge_prob/ParamSamplerSpec.max_val = 0.6

train_prob/ParamSamplerSpec.name = "train_prob"
train_prob/ParamSamplerSpec.min_val = 0.6
train_prob/ParamSamplerSpec.max_val = 0.6

tuning_prob/ParamSamplerSpec.name = "tuning_prob"
tuning_prob/ParamSamplerSpec.min_val = 0.2
tuning_prob/ParamSamplerSpec.max_val = 0.2

SubstructureBeamHandler.batch_size = 64
SubstructureBeamHandler.benchmarker_wrappers = [
#  @LRGraphBenchmark,
  @GCN_/NNGraphBenchmark,
  @MLP_/NNGraphBenchmark
]

# GCN setup
GCN_/NNGraphBenchmark.model_class = @GCN
GCN_/NNGraphBenchmark.benchmark_params = {
    'epochs' : 50,
    'lr' : 0.0001 ,
}
GCN_/NNGraphBenchmark.h_params = {
    'in_channels' : 1,
    'hidden_channels' : [16, 32],
    'num_layers' : 2,
}

# MLP setup
MLP_/NNGraphBenchmark.model_class = @MLP
MLP_/NNGraphBenchmark.benchmark_params = {
    'epochs' : 50,
    'lr' : 0.0001 ,
}
MLP_/NNGraphBenchmark.h_params = {
    'in_channels' : 1,
    'hidden_channels' : [16, 32],
    'num_layers' : 2,
}