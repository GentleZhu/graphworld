import graph_world.models.basic_gnn

GeneratorBeamHandlerWrapper.handler = @SbmBeamHandler()
GeneratorBeamHandlerWrapper.nsamples = 10000

SbmBeamHandler.num_tuning_rounds = 16
SbmBeamHandler.tuning_metric = "test_f1_macro"
SbmBeamHandler.tuning_metric_is_loss = False
SbmBeamHandler.param_sampler_specs = [
  @nvertex/ParamSamplerSpec(),
  @avg_degree/ParamSamplerSpec(),
  @feature_center_distance/ParamSamplerSpec(),
  @feature_dim/ParamSamplerSpec(),
  @edge_center_distance/ParamSamplerSpec(),
  @edge_feature_dim/ParamSamplerSpec(),
  @p_to_q_ratio/ParamSamplerSpec(),
  @num_clusters/ParamSamplerSpec(),
  @cluster_size_slope/ParamSamplerSpec()
]

nvertex/ParamSamplerSpec.name = "nvertex"
nvertex/ParamSamplerSpec.min_val = 32
nvertex/ParamSamplerSpec.max_val = 512

p_to_q_ratio/ParamSamplerSpec.name = "p_to_q_ratio"
p_to_q_ratio/ParamSamplerSpec.min_val = 1.0
p_to_q_ratio/ParamSamplerSpec.max_val = 10.0

avg_degree/ParamSamplerSpec.name = "avg_degree"
avg_degree/ParamSamplerSpec.min_val = 1.0
avg_degree/ParamSamplerSpec.max_val = 20.0

# We must have min_val = max_val = in_channels for all models here,
# until we dynamically pass the data's feature dimension within the
# benchmarker ParDo.
feature_dim/ParamSamplerSpec.name = "feature_dim"
feature_dim/ParamSamplerSpec.min_val = 16
feature_dim/ParamSamplerSpec.max_val = 16

feature_center_distance/ParamSamplerSpec.name = "feature_center_distance"
feature_center_distance/ParamSamplerSpec.min_val = 0.0
feature_center_distance/ParamSamplerSpec.max_val = 5.0

edge_center_distance/ParamSamplerSpec.name = "edge_center_distance"
edge_center_distance/ParamSamplerSpec.min_val = 2.0
edge_center_distance/ParamSamplerSpec.max_val = 2.0

edge_feature_dim/ParamSamplerSpec.name = "edge_feature_dim"
edge_feature_dim/ParamSamplerSpec.min_val = 2.0
edge_feature_dim/ParamSamplerSpec.max_val = 2.0

num_clusters/ParamSamplerSpec.name = "num_clusters"
num_clusters/ParamSamplerSpec.min_val = 2.0
num_clusters/ParamSamplerSpec.max_val = 6.0

cluster_size_slope/ParamSamplerSpec.name = "cluster_size_slope"
cluster_size_slope/ParamSamplerSpec.min_val = 0.0
cluster_size_slope/ParamSamplerSpec.max_val = 0.5

SbmBeamHandler.benchmarker_wrappers = [
  @GCN_/NNNodeBenchmark,
  @GraphSAGE_/NNNodeBenchmark,
  @GIN_/NNNodeBenchmark,
  @GAT_/NNNodeBenchmark,
]

# Node classification hyperparameter ranges
LR = [0.01, 0.001, 0.0001]
HIDDEN_CHANNELS = [4, 8, 16]
NUM_LAYERS = [2, 3, 4]

# GCN setup
GCN_/NNNodeBenchmark.model_class = @GCN
GCN_/NNNodeBenchmark.benchmark_params = {
    'epochs' : 256,
    'lr': %LR,
}
GCN_/NNNodeBenchmark.h_params = {
    'in_channels' : 16,
    'hidden_channels' : %HIDDEN_CHANNELS,
    'num_layers' : %NUM_LAYERS,
}

# GraphSAGE setup
GraphSAGE_/NNNodeBenchmark.model_class = @GraphSAGE
GraphSAGE_/NNNodeBenchmark.benchmark_params = {
    'epochs' : 256,
    'lr': %LR,
}
GraphSAGE_/NNNodeBenchmark.h_params = {
    'in_channels' : 16,
    'hidden_channels' : %HIDDEN_CHANNELS,
    'num_layers' : %NUM_LAYERS,
}

# GIN setup
GIN_/NNNodeBenchmark.model_class = @GIN
GIN_/NNNodeBenchmark.benchmark_params = {
    'epochs' : 256,
    'lr': %LR,
}
GIN_/NNNodeBenchmark.h_params = {
    'in_channels' : 16,
    'hidden_channels' : %HIDDEN_CHANNELS,
    'num_layers' : %NUM_LAYERS,
}

# GAT setup
GAT_/NNNodeBenchmark.model_class = @GAT
GAT_/NNNodeBenchmark.benchmark_params = {
    'epochs' : 256,
    'lr': %LR,
}
GAT_/NNNodeBenchmark.h_params = {
    'in_channels' : 16,
    'hidden_channels' : %HIDDEN_CHANNELS,
    'num_layers' : %NUM_LAYERS,
}
